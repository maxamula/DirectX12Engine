<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="windows" type="System.Collections.ObjectModel.ReadOnlyObservableCollection<Editor.Project.EngineWindow>" #>
#include "common.h"
#include "engine.h"
#include "window.h"
#include <thread>
#pragma warning(disable:4996)

using namespace engine;

// Wnd procs
<#
System.Collections.Generic.List<string> _usedProc = new System.Collections.Generic.List<string>();
foreach(var window in windows)
{#>
<#if(!_usedProc.Contains(window.Procedure) && window.Procedure != null) {#>
__declspec(dllimport) extern LRESULT <#=window.Procedure#>(Window* This, HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam);
<#_usedProc.Add(window.Procedure);#>
<#}#>
<#}#>
// Windows
<#
foreach(var window in windows)
{#>
__declspec(dllimport) extern Window* <#=window.Name#>;
<#}#>

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
#ifdef _DEBUG
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	AllocConsole();
	freopen("CONOUT$", "w", stderr);
#endif // _DEBUG
	engine::LoadGCDLL(L"GameAssembly.dll");
	engine::Init();
	// init
<# if(windows.Count > 0)
{#>
	GFX_WND_DESC wndDesc;
<#}#>
<#
foreach(var window in windows)
{#>

<#if(window.Procedure != null){#>
	wndDesc.callback = (WndProcFnPtr)<#=window.Procedure#>;
<#} else {#>
	wndDesc.callback = nullptr;
<#}#>
	wndDesc.hParent = nullptr;
	wndDesc.szCaption = (wchar_t*)L"<#=window.Title#>";
	wndDesc.width = <#=window.Width#>;
	wndDesc.height = <#=window.Height#>;
	<#=window.Name#> = Window::Create(hInstance, wndDesc);
<#if(window.IsFullScreen){#>
	<#=window.Name#>->Fullscreen(true);
<#}#>
<#if(window.ShowOnStartup){#>
	<#=window.Name#>->ShowWnd();
<#}}#>
	bool isRunning = true;
	std::thread logicThread([&isRunning]() 
	{
		while (isRunning) 
		{
			//engine::Update();
		}
	});
	MSG msg;
	while (isRunning)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT)
			{
				isRunning = false;
				logicThread.join();
			}
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
<#foreach(var window in windows)
{#>
		<#=window.Name#>->Render();
<#}#>	
	}
<#foreach(var window in windows)
{#>
	<#=window.Name#>->Destroy();
<#}#>	
	engine::UnloadGCDLL();
	engine::Shutdown();
	return 0;
}