<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections"#>
<#@ parameter name="windows" type="System.Collections.ObjectModel.ReadOnlyObservableCollection<Editor.Project.EngineWindow>" #>
#pragma once
#include <unordered_map>

#include "window.h"
using namespace engine;

// Global decl
extern HINSTANCE hInst;
// WND procs
<#
System.Collections.Generic.List<string> _usedProc = new System.Collections.Generic.List<string>();
foreach(var window in windows)
{#>
<#if(!_usedProc.Contains(window.Procedure) && window.Procedure != null) {#>
__declspec(dllexport) extern LRESULT <#=window.Procedure#>(Window* This, HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam);
<#_usedProc.Add(window.Procedure);#>
<#}#>
<#}#>

<#
foreach(var window in windows)
{#>
__declspec(dllexport) extern Window* <#=window.Name#>;
<#}#>

__declspec(dllexport) std::unordered_map<uint64_t ,SCIPT_INFO>& ScriptTable();	// guaranteed to be initialized before main
uint8_t RegisterScript(uint64_t handle, ScriptCreator creator);